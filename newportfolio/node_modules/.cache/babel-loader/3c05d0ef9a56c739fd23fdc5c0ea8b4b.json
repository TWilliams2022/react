{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl } from \"tsparticles-engine\";\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return clamp(value, modeValue, particleValue);\n  }\n}\n\nexport class Bubbler extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    this.handleClickMode = mode => {\n      if (mode !== \"bubble\") {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      container.bubble.clicking = true;\n    };\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n          divs = events.onDiv,\n          divBubble = isDivModeEnabled(\"bubble\", divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n  }\n\n  reset(particle) {\n    particle.bubble.inRange = false;\n  }\n\n  clear(particle, force) {\n    if (particle.bubble.inRange && !force) {\n      return;\n    }\n\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n\n  async interact() {\n    const options = this.container.actualOptions,\n          events = options.interactivity.events,\n          onHover = events.onHover,\n          onClick = events.onClick,\n          hoverEnabled = onHover.enable,\n          hoverMode = onHover.mode,\n          clickEnabled = onClick.enable,\n          clickMode = onClick.mode,\n          divs = events.onDiv;\n\n    if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n      this.clickBubble();\n    } else {\n      divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n\n  singleSelectorHover(selector, div) {\n    const container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n    if (!selectors.length) {\n      return;\n    }\n\n    selectors.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = divMode(divs, elem);\n\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.clear(particle, true);\n          particle.bubble.div = elem;\n        }\n\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    const options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n    if (bubbleParam === particlesParam) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n          if (type === \"size\") {\n            particle.bubble.radius = value;\n          }\n\n          if (type === \"opacity\") {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === \"size\") {\n        delete particle.bubble.radius;\n      }\n\n      if (type === \"opacity\") {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n\n  clickBubble() {\n    var _a, _b;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (!mouseClickPos) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n            distMouse = getDistance(pos, mouseClickPos),\n            timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: \"size\"\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: \"opacity\"\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n\n  hoverBubble() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n            pointDistance = getDistance(pos, mousePos),\n            ratio = 1 - pointDistance / distance;\n\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c;\n\n    const container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n    if (!modeOpacity) {\n      return;\n    }\n\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n\n      if (!modeColor) {\n        return;\n      }\n\n      const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n      particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n    }\n\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n\n}","map":{"version":3,"names":["Circle","ExternalInteractorBase","Rectangle","clamp","colorMix","divMode","divModeExecute","getDistance","getRangeMax","isDivModeEnabled","isInArray","itemFromArray","mouseLeaveEvent","mouseMoveEvent","rangeColorToHsl","rgbToHsl","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","constructor","container","bubble","handleClickMode","mode","clicking","isEnabled","particle","_a","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","onHover","enable","position","onClick","clickPosition","hoverMode","clickMode","reset","inRange","clear","force","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","query","particles","quadTree","p","contains","getPosition","modes","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","_b","mouseClickPos","distance","queryCircle","Date","getTime","clickTime","sizeData","bubbleModeSize","size","opacityData","mousePos","pointDistance","status","modeSize","optSize","pSize","_c","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","mix","pColor","getFillColor"],"sources":["/Users/twill/Ideaprojects/React/portoliojob/newportfolio/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js"],"sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromArray, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n    clear(particle, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    async interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.clear(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? itemFromArray(modeColor) : modeColor;\n            particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}