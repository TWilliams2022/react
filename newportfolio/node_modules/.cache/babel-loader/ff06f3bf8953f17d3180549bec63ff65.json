{"ast":null,"code":"var _jsxFileName = \"/Users/twill/Ideaprojects/React/portoliojob/newportfolio/src/components/Particles.js\",\n    _s = $RefreshSig$();\n\nimport Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\";\nimport { useCallback, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ParticlesComponent = props => {\n  _s();\n\n  const options = useMemo(() => {\n    // all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\n    return {\n      background: {\n        color: \"#000\" // this sets a background color for the canvas\n\n      },\n      fullScreen: {\n        enable: true,\n        // enabling this will make the canvas fill the entire screen, it's enabled by default\n        zIndex: -1 // this is the z-index value used when the fullScreen is enabled, it's 0 by default\n\n      },\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true,\n            // enables the click event\n            mode: \"push\" // adds the particles on click\n\n          },\n          onHover: {\n            enable: true,\n            // enables the hover event\n            mode: \"repulse\" // make the particles run away from the cursor\n\n          }\n        },\n        modes: {\n          push: {\n            quantity: 10 // number of particles to add on click\n\n          },\n          repulse: {\n            distance: 100 // distance of the particles from the cursor\n\n          }\n        }\n      },\n      particles: {\n        links: {\n          enable: false,\n          // enabling this will make particles linked together\n          distance: 200\n        },\n        move: {\n          enable: true,\n          speed: {\n            min: 1,\n            max: 3\n          }\n        },\n        opacity: {\n          value: {\n            min: 0.3,\n            max: 0.7\n          }\n        },\n        size: {\n          value: {\n            min: 1,\n            max: 5\n          } // let's randomize the particles size a bit\n\n        }\n      }\n    };\n  }, []); // useCallback is not mandatory, but it's recommended since this callback can be memoized if static\n\n  const particlesInit = useCallback(engine => {\n    loadSlim(engine); // loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n  }, []); // setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\n\n  return /*#__PURE__*/_jsxDEV(Particles, {\n    id: props.id,\n    init: particlesInit,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ParticlesComponent, \"S09+AMUDbBeUwQCtb/KU1O30zJc=\");\n\n_c = ParticlesComponent;\nexport default ParticlesComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticlesComponent\");","map":{"version":3,"names":["Particles","loadSlim","useCallback","useMemo","ParticlesComponent","props","options","background","color","fullScreen","enable","zIndex","interactivity","events","onClick","mode","onHover","modes","push","quantity","repulse","distance","particles","links","move","speed","min","max","opacity","value","size","particlesInit","engine","id"],"sources":["/Users/twill/Ideaprojects/React/portoliojob/newportfolio/src/components/Particles.js"],"sourcesContent":["import Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\";\nimport { useCallback, useMemo } from \"react\";\n\nconst ParticlesComponent = (props) => {\n  const options = useMemo(() => {\n    // all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\n    return {\n      background: {\n        color: \"#000\", // this sets a background color for the canvas\n      },\n      fullScreen: {\n        enable: true, // enabling this will make the canvas fill the entire screen, it's enabled by default\n        zIndex: -1, // this is the z-index value used when the fullScreen is enabled, it's 0 by default\n      },\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true, // enables the click event\n            mode: \"push\", // adds the particles on click\n          },\n          onHover: {\n            enable: true, // enables the hover event\n            mode: \"repulse\", // make the particles run away from the cursor\n          },\n        },\n        modes: {\n          push: {\n            quantity: 10, // number of particles to add on click\n          },\n          repulse: {\n            distance: 100, // distance of the particles from the cursor\n          },\n        },\n      },\n      particles: {\n        links: {\n          enable: false, // enabling this will make particles linked together\n          distance: 200, \n        },\n        move: {\n          enable: true,\n          speed: { min: 1, max: 3 }, \n        },\n        opacity: {\n          value: { min: 0.3, max: 0.7 }, \n        },\n        size: {\n          value: { min: 1, max: 5 }, // let's randomize the particles size a bit\n        },\n      },\n    };\n  }, []);\n\n  // useCallback is not mandatory, but it's recommended since this callback can be memoized if static\n  const particlesInit = useCallback((engine) => {\n    loadSlim(engine);\n    // loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n  }, []);\n\n  // setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\n  return <Particles id={props.id} init={particlesInit} options={options} />;\n};\n\nexport default ParticlesComponent;\n"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;;;AAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;EAAA;;EACpC,MAAMC,OAAO,GAAGH,OAAO,CAAC,MAAM;IAC5B;IACA,OAAO;MACLI,UAAU,EAAE;QACVC,KAAK,EAAE,MADG,CACK;;MADL,CADP;MAILC,UAAU,EAAE;QACVC,MAAM,EAAE,IADE;QACI;QACdC,MAAM,EAAE,CAAC,CAFC,CAEE;;MAFF,CAJP;MAQLC,aAAa,EAAE;QACbC,MAAM,EAAE;UACNC,OAAO,EAAE;YACPJ,MAAM,EAAE,IADD;YACO;YACdK,IAAI,EAAE,MAFC,CAEO;;UAFP,CADH;UAKNC,OAAO,EAAE;YACPN,MAAM,EAAE,IADD;YACO;YACdK,IAAI,EAAE,SAFC,CAEU;;UAFV;QALH,CADK;QAWbE,KAAK,EAAE;UACLC,IAAI,EAAE;YACJC,QAAQ,EAAE,EADN,CACU;;UADV,CADD;UAILC,OAAO,EAAE;YACPC,QAAQ,EAAE,GADH,CACQ;;UADR;QAJJ;MAXM,CARV;MA4BLC,SAAS,EAAE;QACTC,KAAK,EAAE;UACLb,MAAM,EAAE,KADH;UACU;UACfW,QAAQ,EAAE;QAFL,CADE;QAKTG,IAAI,EAAE;UACJd,MAAM,EAAE,IADJ;UAEJe,KAAK,EAAE;YAAEC,GAAG,EAAE,CAAP;YAAUC,GAAG,EAAE;UAAf;QAFH,CALG;QASTC,OAAO,EAAE;UACPC,KAAK,EAAE;YAAEH,GAAG,EAAE,GAAP;YAAYC,GAAG,EAAE;UAAjB;QADA,CATA;QAYTG,IAAI,EAAE;UACJD,KAAK,EAAE;YAAEH,GAAG,EAAE,CAAP;YAAUC,GAAG,EAAE;UAAf,CADH,CACuB;;QADvB;MAZG;IA5BN,CAAP;EA6CD,CA/CsB,EA+CpB,EA/CoB,CAAvB,CADoC,CAkDpC;;EACA,MAAMI,aAAa,GAAG7B,WAAW,CAAE8B,MAAD,IAAY;IAC5C/B,QAAQ,CAAC+B,MAAD,CAAR,CAD4C,CAE5C;EACD,CAHgC,EAG9B,EAH8B,CAAjC,CAnDoC,CAwDpC;;EACA,oBAAO,QAAC,SAAD;IAAW,EAAE,EAAE3B,KAAK,CAAC4B,EAArB;IAAyB,IAAI,EAAEF,aAA/B;IAA8C,OAAO,EAAEzB;EAAvD;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CA1DD;;GAAMF,kB;;KAAAA,kB;AA4DN,eAAeA,kBAAf"},"metadata":{},"sourceType":"module"}